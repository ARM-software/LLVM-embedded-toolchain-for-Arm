#
# Configuration file for running the libunwind tests against the static library.
#

lit_config.load_config(config, '@CMAKE_CURRENT_BINARY_DIR@/cmake-bridge.cfg')

config.name = 'libunwind-@RUNTIME_VARIANT_NAME@'

config.substitutions.append(('%{libc-linker-script}', '@LIBC_LINKER_SCRIPT@'))

compile_flags = []

if @LIBUNWIND_ENABLE_CET@:
    compile_flags.append('-fcf-protection=full')

# Stack unwinding tests need unwinding tables and these are not generated by default on all targets.
compile_flags.append('-funwind-tables')

local_sysroot = '@CMAKE_OSX_SYSROOT@' or '@CMAKE_SYSROOT@'
config.substitutions.append(('%{flags}',
    '@RUNTIME_TEST_ARCH_FLAGS@' +
    (' -isysroot {}'.format(local_sysroot) if local_sysroot else '')
))
config.substitutions.append(('%{compile_flags}',
    '-nostdinc++ -I %{{include}} {}'.format(' '.join(compile_flags))
))
config.substitutions.append(('%{link_flags}',
    '-nostdlib -nostdlib++ -L %{lib}'
    ' -lc++ -lc++abi'
    ' -lc -lm -lclang_rt.builtins -lsemihost -lcrt0-semihost'
    ' -T %{libc-linker-script}'
    ' -lunwind'
))
config.substitutions.append(('%{exec}',
    '%{executor} --execdir %T -- '
))

import os, site
site.addsitedir(os.path.join('@LIBUNWIND_LIBCXX_PATH@', 'utils'))
import libcxx.test.params, libcxx.test.config
libcxx.test.config.configure(
    libcxx.test.params.DEFAULT_PARAMETERS,
    libcxx.test.features.DEFAULT_FEATURES,
    config,
    lit_config
)
