# This testing configuration handles running the test suite against LLVM's libc++
# using a static library.

lit_config.load_config(config, '@CMAKE_CURRENT_BINARY_DIR@/cmake-bridge.cfg')

config.name = 'libc++-@RUNTIME_VARIANT_NAME@'

config.substitutions.append(('%{libc-include}', '@CMAKE_INSTALL_PREFIX@/include'))
config.substitutions.append(('%{libc-lib}', '@CMAKE_INSTALL_PREFIX@/lib'))
config.substitutions.append(('%{libc-linker-script}', '@LIBC_LINKER_SCRIPT@'))

config.substitutions.append(('%{flags}', '@RUNTIME_TEST_ARCH_FLAGS@'))
config.substitutions.append(('%{compile_flags}',
    '-nostdinc++ -I %{include} -I %{target-include} -I %{libcxx}/test/support'
    ' -isystem %{libc-include}'
))
config.substitutions.append(('%{link_flags}',
    '-nostdlib++ -nostdlib -L %{lib} -lc++ -lc++abi'
    ' -T %{libc-linker-script}'
    ' -lc -lm -lclang_rt.builtins -lsemihost'
    ' %{libc-lib}/crt0-semihost.o'
    ' -L %{libc-lib} -lc++ -lc++abi'
))
config.substitutions.append(('%{exec}',
    '%{executor} --execdir %T -- '
))

import os, site
site.addsitedir(os.path.join('@LIBCXX_SOURCE_DIR@', 'utils'))
import libcxx.test.params, libcxx.test.config
libcxx.test.config.configure(
    libcxx.test.params.DEFAULT_PARAMETERS,
    libcxx.test.features.DEFAULT_FEATURES,
    config,
    lit_config
)
