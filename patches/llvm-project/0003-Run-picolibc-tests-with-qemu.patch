From 864ff32efb746704641fb1a7066fa1f00c512804 Mon Sep 17 00:00:00 2001
From: Michael Platings <michael.platings@arm.com>
Date: Fri, 29 Sep 2023 12:23:37 +0100
Subject: Run picolibc tests with qemu

Differential Revision: https://reviews.llvm.org/D155521
---
 libcxx/cmake/caches/Armv7M-picolibc.cmake           |  1 +
 libcxx/docs/index.rst                               |  2 +-
 libcxx/test/configs/armv7m-libc++.cfg.in            | 13 +++++++++++--
 libcxx/test/libcxx/selftest/dsl/dsl.sh.py           |  4 ++++
 libcxx/test/libcxx/selftest/stdin-is-piped.sh.cpp   |  2 ++
 .../alg.sorting/alg.sort/sort/sort.pass.cpp         |  3 +++
 .../syserr.errcat.objects/generic_category.pass.cpp |  1 +
 .../syserr.errcat.objects/system_category.pass.cpp  |  1 +
 .../narrow.stream.objects/cerr.sh.cpp               |  2 +-
 .../narrow.stream.objects/cin.sh.cpp                |  1 +
 .../narrow.stream.objects/clog.sh.cpp               |  2 +-
 .../narrow.stream.objects/cout.sh.cpp               |  2 --
 .../new.delete.array/sized_delete_array14.pass.cpp  |  1 -
 .../new.delete.single/sized_delete14.pass.cpp       |  1 -
 .../facet.ctype.char.statics/classic_table.pass.cpp |  2 ++
 .../facet.num.put.members/put_long_double.pass.cpp  |  1 +
 .../rand.dist.bern.bin/eval.PR44847.pass.cpp        |  3 +++
 .../time/time.clock/time.clock.file/now.pass.cpp    |  3 +++
 libcxxabi/test/configs/armv7m-libc++abi.cfg.in      | 10 ++++++++--
 libunwind/test/configs/armv7m-libunwind.cfg.in      | 10 ++++++++--
 20 files changed, 52 insertions(+), 13 deletions(-)

diff --git a/libcxx/cmake/caches/Armv7M-picolibc.cmake b/libcxx/cmake/caches/Armv7M-picolibc.cmake
index 6ed1866a5084..e308ac31d1d1 100644
--- a/libcxx/cmake/caches/Armv7M-picolibc.cmake
+++ b/libcxx/cmake/caches/Armv7M-picolibc.cmake
@@ -36,3 +36,4 @@ set(LIBUNWIND_ENABLE_THREADS OFF CACHE BOOL "")
 set(LIBUNWIND_IS_BAREMETAL ON CACHE BOOL "")
 set(LIBUNWIND_REMEMBER_HEAP_ALLOC ON CACHE BOOL "")
 set(LIBUNWIND_USE_COMPILER_RT ON CACHE BOOL "")
+find_program(QEMU_SYSTEM_ARM qemu-system-arm)
diff --git a/libcxx/docs/index.rst b/libcxx/docs/index.rst
index 7bb5512beb1f..e8b4a95dbcff 100644
--- a/libcxx/docs/index.rst
+++ b/libcxx/docs/index.rst
@@ -133,7 +133,7 @@ Linux                 i386, x86_64, arm, arm64  Only glibc-2.24 and later and no
 Android 5.0+          i386, x86_64, arm, arm64
 Windows               i386, x86_64              Both MSVC and MinGW style environments, ABI in MSVC environments is :doc:`unstable <DesignDocs/ABIVersioning>`
 AIX 7.2TL5+           powerpc, powerpc64
-Embedded (picolibc)   arm                       Support for building with picolibc is currently work-in-progress
+Embedded (picolibc)   arm
 ===================== ========================= ============================
 
 Generally speaking, libc++ should work on any platform that provides a fairly complete
diff --git a/libcxx/test/configs/armv7m-libc++.cfg.in b/libcxx/test/configs/armv7m-libc++.cfg.in
index 688c791b2028..9d8d567d7766 100644
--- a/libcxx/test/configs/armv7m-libc++.cfg.in
+++ b/libcxx/test/configs/armv7m-libc++.cfg.in
@@ -26,10 +26,19 @@ config.substitutions.append(('%{link_flags}',
     ' -Wl,--defsym=__ram_size=0x1000000'
     ' -Wl,--defsym=__stack_size=0x1000'
 ))
+
+config.executor = (
+    '@LIBCXX_SOURCE_DIR@/utils/qemu_baremetal.py'
+    ' --qemu @QEMU_SYSTEM_ARM@'
+    ' --machine mps2-an385'
+    ' --cpu cortex-m3')
 config.substitutions.append(('%{exec}',
-    'true' # TODO use qemu-system-arm
+    '%{executor}'
+    ' --execdir %T'
 ))
-config.available_features.add('libcxx-fake-executor')
+
+# Long tests are prohibitively slow when run via emulation.
+config.long_tests = False
 
 import os, site
 site.addsitedir(os.path.join('@LIBCXX_SOURCE_DIR@', 'utils'))
diff --git a/libcxx/test/libcxx/selftest/dsl/dsl.sh.py b/libcxx/test/libcxx/selftest/dsl/dsl.sh.py
index 6c695a0d672e..6cb79d98228c 100644
--- a/libcxx/test/libcxx/selftest/dsl/dsl.sh.py
+++ b/libcxx/test/libcxx/selftest/dsl/dsl.sh.py
@@ -8,6 +8,10 @@
 
 # XFAIL: libcxx-fake-executor
 
+# With picolibc, test_program_stderr_is_not_conflated_with_stdout fails
+# because stdout & stderr are treated as the same.
+# XFAIL: LIBCXX-PICOLIBC-FIXME
+
 # Note: We prepend arguments with 'x' to avoid thinking there are too few
 #       arguments in case an argument is an empty string.
 # RUN: %{python} %s x%S x%T x%{substitutions}
diff --git a/libcxx/test/libcxx/selftest/stdin-is-piped.sh.cpp b/libcxx/test/libcxx/selftest/stdin-is-piped.sh.cpp
index ffd10631c6a6..897e10e94783 100644
--- a/libcxx/test/libcxx/selftest/stdin-is-piped.sh.cpp
+++ b/libcxx/test/libcxx/selftest/stdin-is-piped.sh.cpp
@@ -8,6 +8,8 @@
 
 // Make sure that the executor pipes standard input to the test-executable being run.
 
+// XFAIL: LIBCXX-PICOLIBC-FIXME
+
 // RUN: %{build}
 // RUN: echo "abc" | %{exec} %t.exe
 
diff --git a/libcxx/test/std/algorithms/alg.sorting/alg.sort/sort/sort.pass.cpp b/libcxx/test/std/algorithms/alg.sorting/alg.sort/sort/sort.pass.cpp
index ed26c5b861f5..56c0964c8750 100644
--- a/libcxx/test/std/algorithms/alg.sorting/alg.sort/sort/sort.pass.cpp
+++ b/libcxx/test/std/algorithms/alg.sorting/alg.sort/sort/sort.pass.cpp
@@ -6,6 +6,9 @@
 //
 //===----------------------------------------------------------------------===//
 
+// This test appears to hang with picolibc & qemu.
+// UNSUPPORTED: LIBCXX-PICOLIBC-FIXME
+
 // <algorithm>
 
 // template<RandomAccessIterator Iter>
diff --git a/libcxx/test/std/diagnostics/syserr/syserr.errcat/syserr.errcat.objects/generic_category.pass.cpp b/libcxx/test/std/diagnostics/syserr/syserr.errcat/syserr.errcat.objects/generic_category.pass.cpp
index 5b63272a3a1a..3f49c36f8ba2 100644
--- a/libcxx/test/std/diagnostics/syserr/syserr.errcat/syserr.errcat.objects/generic_category.pass.cpp
+++ b/libcxx/test/std/diagnostics/syserr/syserr.errcat/syserr.errcat.objects/generic_category.pass.cpp
@@ -7,6 +7,7 @@
 //===----------------------------------------------------------------------===//
 
 // XFAIL: stdlib=apple-libc++ && target={{.+}}-apple-macosx10.{{9|10|11|12}}
+// XFAIL: LIBCXX-PICOLIBC-FIXME
 
 // <system_error>
 
diff --git a/libcxx/test/std/diagnostics/syserr/syserr.errcat/syserr.errcat.objects/system_category.pass.cpp b/libcxx/test/std/diagnostics/syserr/syserr.errcat/syserr.errcat.objects/system_category.pass.cpp
index 1caf5cb2ccf7..4a29e1baa808 100644
--- a/libcxx/test/std/diagnostics/syserr/syserr.errcat/syserr.errcat.objects/system_category.pass.cpp
+++ b/libcxx/test/std/diagnostics/syserr/syserr.errcat/syserr.errcat.objects/system_category.pass.cpp
@@ -13,6 +13,7 @@
 // const error_category& system_category();
 
 // XFAIL: stdlib=apple-libc++ && target={{.+}}-apple-macosx10.{{9|10|11|12}}
+// XFAIL: LIBCXX-PICOLIBC-FIXME
 
 #include <system_error>
 #include <cassert>
diff --git a/libcxx/test/std/input.output/iostream.objects/narrow.stream.objects/cerr.sh.cpp b/libcxx/test/std/input.output/iostream.objects/narrow.stream.objects/cerr.sh.cpp
index 9a4b437ab109..da5563f87df4 100644
--- a/libcxx/test/std/input.output/iostream.objects/narrow.stream.objects/cerr.sh.cpp
+++ b/libcxx/test/std/input.output/iostream.objects/narrow.stream.objects/cerr.sh.cpp
@@ -6,7 +6,7 @@
 //
 //===----------------------------------------------------------------------===//
 
-// UNSUPPORTED: LIBCXX-PICOLIBC-FIXME
+// XFAIL: LIBCXX-PICOLIBC-FIXME
 
 // <iostream>
 
diff --git a/libcxx/test/std/input.output/iostream.objects/narrow.stream.objects/cin.sh.cpp b/libcxx/test/std/input.output/iostream.objects/narrow.stream.objects/cin.sh.cpp
index 28ea650e58b1..ad6cc192e2f4 100644
--- a/libcxx/test/std/input.output/iostream.objects/narrow.stream.objects/cin.sh.cpp
+++ b/libcxx/test/std/input.output/iostream.objects/narrow.stream.objects/cin.sh.cpp
@@ -8,6 +8,7 @@
 
 // TODO: Investigate
 // UNSUPPORTED: LIBCXX-AIX-FIXME
+// XFAIL: LIBCXX-PICOLIBC-FIXME
 
 // This test hangs on Android devices that lack shell_v2, which was added in
 // Android N (API 24).
diff --git a/libcxx/test/std/input.output/iostream.objects/narrow.stream.objects/clog.sh.cpp b/libcxx/test/std/input.output/iostream.objects/narrow.stream.objects/clog.sh.cpp
index 783be3a52e94..9bedd67e816e 100644
--- a/libcxx/test/std/input.output/iostream.objects/narrow.stream.objects/clog.sh.cpp
+++ b/libcxx/test/std/input.output/iostream.objects/narrow.stream.objects/clog.sh.cpp
@@ -6,7 +6,7 @@
 //
 //===----------------------------------------------------------------------===//
 
-// UNSUPPORTED: LIBCXX-PICOLIBC-FIXME
+// XFAIL: LIBCXX-PICOLIBC-FIXME
 
 // <iostream>
 
diff --git a/libcxx/test/std/input.output/iostream.objects/narrow.stream.objects/cout.sh.cpp b/libcxx/test/std/input.output/iostream.objects/narrow.stream.objects/cout.sh.cpp
index 1234da38de03..b8d319385ca1 100644
--- a/libcxx/test/std/input.output/iostream.objects/narrow.stream.objects/cout.sh.cpp
+++ b/libcxx/test/std/input.output/iostream.objects/narrow.stream.objects/cout.sh.cpp
@@ -6,8 +6,6 @@
 //
 //===----------------------------------------------------------------------===//
 
-// UNSUPPORTED: LIBCXX-PICOLIBC-FIXME
-
 // <iostream>
 
 // ostream cout;
diff --git a/libcxx/test/std/language.support/support.dynamic/new.delete/new.delete.array/sized_delete_array14.pass.cpp b/libcxx/test/std/language.support/support.dynamic/new.delete/new.delete.array/sized_delete_array14.pass.cpp
index 901f2cca4ce0..21663cdf956d 100644
--- a/libcxx/test/std/language.support/support.dynamic/new.delete/new.delete.array/sized_delete_array14.pass.cpp
+++ b/libcxx/test/std/language.support/support.dynamic/new.delete/new.delete.array/sized_delete_array14.pass.cpp
@@ -9,7 +9,6 @@
 // test sized operator delete[] replacement.
 
 // UNSUPPORTED: sanitizer-new-delete, c++03, c++11
-// UNSUPPORTED: LIBCXX-PICOLIBC-FIXME
 
 // NOTE: Clang does not enable sized-deallocation in C++14 and beyond by
 // default. It is only enabled when -fsized-deallocation is given.
diff --git a/libcxx/test/std/language.support/support.dynamic/new.delete/new.delete.single/sized_delete14.pass.cpp b/libcxx/test/std/language.support/support.dynamic/new.delete/new.delete.single/sized_delete14.pass.cpp
index d0b10b65be28..a8701ce7a86c 100644
--- a/libcxx/test/std/language.support/support.dynamic/new.delete/new.delete.single/sized_delete14.pass.cpp
+++ b/libcxx/test/std/language.support/support.dynamic/new.delete/new.delete.single/sized_delete14.pass.cpp
@@ -9,7 +9,6 @@
 // test sized operator delete replacement.
 
 // UNSUPPORTED: sanitizer-new-delete, c++03, c++11
-// UNSUPPORTED: LIBCXX-PICOLIBC-FIXME
 
 // NOTE: Clang does not enable sized-deallocation in C++14 and beyond by
 // default. It is only enabled when -fsized-deallocation is given.
diff --git a/libcxx/test/std/localization/locale.categories/category.ctype/facet.ctype.special/facet.ctype.char.statics/classic_table.pass.cpp b/libcxx/test/std/localization/locale.categories/category.ctype/facet.ctype.special/facet.ctype.char.statics/classic_table.pass.cpp
index 8fe8080bde98..50c60180ce0d 100644
--- a/libcxx/test/std/localization/locale.categories/category.ctype/facet.ctype.special/facet.ctype.char.statics/classic_table.pass.cpp
+++ b/libcxx/test/std/localization/locale.categories/category.ctype/facet.ctype.special/facet.ctype.char.statics/classic_table.pass.cpp
@@ -6,6 +6,8 @@
 //
 //===----------------------------------------------------------------------===//
 
+// XFAIL: LIBCXX-PICOLIBC-FIXME
+
 // <locale>
 
 // template <> class ctype<char>
diff --git a/libcxx/test/std/localization/locale.categories/category.numeric/locale.nm.put/facet.num.put.members/put_long_double.pass.cpp b/libcxx/test/std/localization/locale.categories/category.numeric/locale.nm.put/facet.num.put.members/put_long_double.pass.cpp
index 8bb9ff1c202a..8637a933008f 100644
--- a/libcxx/test/std/localization/locale.categories/category.numeric/locale.nm.put/facet.num.put.members/put_long_double.pass.cpp
+++ b/libcxx/test/std/localization/locale.categories/category.numeric/locale.nm.put/facet.num.put.members/put_long_double.pass.cpp
@@ -13,6 +13,7 @@
 // iter_type put(iter_type s, ios_base& iob, char_type fill, long double v) const;
 
 // XFAIL: win32-broken-printf-g-precision
+// XFAIL: LIBCXX-PICOLIBC-FIXME
 
 // Needs more investigation, but this is probably failing on Android M (API 23)
 // and up because the printf formatting of NAN changed.
diff --git a/libcxx/test/std/numerics/rand/rand.dist/rand.dist.bern/rand.dist.bern.bin/eval.PR44847.pass.cpp b/libcxx/test/std/numerics/rand/rand.dist/rand.dist.bern/rand.dist.bern.bin/eval.PR44847.pass.cpp
index 9213d2bac5a6..572a59b7a192 100644
--- a/libcxx/test/std/numerics/rand/rand.dist/rand.dist.bern/rand.dist.bern.bin/eval.PR44847.pass.cpp
+++ b/libcxx/test/std/numerics/rand/rand.dist/rand.dist.bern/rand.dist.bern.bin/eval.PR44847.pass.cpp
@@ -18,6 +18,9 @@
 // Serializing/deserializing the state of the RNG requires iostreams
 // UNSUPPORTED: no-localization
 
+// This test appears to hang with picolibc & qemu.
+// UNSUPPORTED: LIBCXX-PICOLIBC-FIXME
+
 #include <random>
 #include <numeric>
 #include <vector>
diff --git a/libcxx/test/std/time/time.clock/time.clock.file/now.pass.cpp b/libcxx/test/std/time/time.clock/time.clock.file/now.pass.cpp
index 0852483a8b39..4ba17a48988b 100644
--- a/libcxx/test/std/time/time.clock/time.clock.file/now.pass.cpp
+++ b/libcxx/test/std/time/time.clock/time.clock.file/now.pass.cpp
@@ -10,6 +10,9 @@
 
 // UNSUPPORTED: availability-filesystem-missing
 
+// qemu: Unsupported SemiHosting SWI 0x30
+// UNSUPPORTED: LIBCXX-PICOLIBC-FIXME
+
 // <chrono>
 
 // file_clock
diff --git a/libcxxabi/test/configs/armv7m-libc++abi.cfg.in b/libcxxabi/test/configs/armv7m-libc++abi.cfg.in
index 876f43e44bbb..c244e44bbe71 100644
--- a/libcxxabi/test/configs/armv7m-libc++abi.cfg.in
+++ b/libcxxabi/test/configs/armv7m-libc++abi.cfg.in
@@ -17,10 +17,16 @@ config.substitutions.append(('%{link_flags}',
     ' -Wl,--defsym=__ram_size=0x1000000'
     ' -Wl,--defsym=__stack_size=0x1000'
 ))
+
+config.executor = (
+    '@LIBCXXABI_LIBCXX_PATH@/utils/qemu_baremetal.py'
+    ' --qemu @QEMU_SYSTEM_ARM@'
+    ' --machine mps2-an385'
+    ' --cpu cortex-m3')
 config.substitutions.append(('%{exec}',
-    'true' # TODO use qemu-system-arm
+    '%{executor}'
+    ' --execdir %T'
 ))
-config.available_features.add('libcxx-fake-executor')
 
 import os, site
 site.addsitedir(os.path.join('@LIBCXXABI_LIBCXX_PATH@', 'utils'))
diff --git a/libunwind/test/configs/armv7m-libunwind.cfg.in b/libunwind/test/configs/armv7m-libunwind.cfg.in
index 6ddb6138c402..48c02add6e49 100644
--- a/libunwind/test/configs/armv7m-libunwind.cfg.in
+++ b/libunwind/test/configs/armv7m-libunwind.cfg.in
@@ -17,10 +17,16 @@ config.substitutions.append(('%{link_flags}',
     ' -Wl,--defsym=__ram_size=0x1000000'
     ' -Wl,--defsym=__stack_size=0x1000'
 ))
+
+config.executor = (
+    '@LIBUNWIND_LIBCXX_PATH@/utils/qemu_baremetal.py'
+    ' --qemu @QEMU_SYSTEM_ARM@'
+    ' --machine mps2-an385'
+    ' --cpu cortex-m3')
 config.substitutions.append(('%{exec}',
-    'true' # TODO use qemu-system-arm
+    '%{executor}'
+    ' --execdir %T'
 ))
-config.available_features.add('libcxx-fake-executor')
 
 import os, site
 site.addsitedir(os.path.join('@LIBUNWIND_LIBCXX_PATH@', 'utils'))
-- 
2.34.1

