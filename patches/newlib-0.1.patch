diff --git a/configure b/configure
index 5db527014..05b82fbfc 100755
--- a/configure
+++ b/configure
@@ -6791,6 +6791,20 @@ if test "x$CFLAGS_FOR_TARGET" = x; then
   fi
 fi
 
+# Check whether --enable-newlib_hw_fp was given.
+if test "${enable_newlib_hw_fp+set}" = set; then :
+  enableval=$enable_newlib_hw_fp; case "${enableval}" in
+   yes) newlib_hw_fp=true ;;
+   no)  newlib_hw_fp=false ;;
+   *) as_fn_error $? "bad value ${enableval} for --enable-newlib-hw-fp" "$LINENO" 5 ;;
+ esac
+else
+  newlib_hw_fp=false
+fi
+
+if test $newlib_hw_fp = true; then
+    CFLAGS_FOR_TARGET="$CFLAGS_FOR_TARGET -DNEWLIB_HW_FP"
+fi
 
 if test "x$CXXFLAGS_FOR_TARGET" = x; then
   if test "x${is_cross_compiler}" = xyes; then
diff --git a/libgloss/arm/crt0.S b/libgloss/arm/crt0.S
index 8490bde2f..8b85b28f4 100644
--- a/libgloss/arm/crt0.S
+++ b/libgloss/arm/crt0.S
@@ -565,7 +565,7 @@ change_back:
 
 	/* For Thumb, constants must be after the code since only 
 	   positive offsets are supported for PC relative addresses.  */
-	.align 0
+	.p2align 2
 .LC0:
 #ifdef ARM_RDI_MONITOR
 	.word	HeapBase
diff --git a/libgloss/arm/linux-crt0.c b/libgloss/arm/linux-crt0.c
index 6b2d62a9b..000a2c728 100644
--- a/libgloss/arm/linux-crt0.c
+++ b/libgloss/arm/linux-crt0.c
@@ -29,7 +29,7 @@ asm("\n"
 __attribute__((naked, used))
 static void _start_thumb(void)
 #else
-__attribute__((naked))
+//__attribute__((naked))
 void _start(void)
 #endif
 {
diff --git a/libgloss/arm/syscalls.c b/libgloss/arm/syscalls.c
index fc394f94b..0b3287df4 100644
--- a/libgloss/arm/syscalls.c
+++ b/libgloss/arm/syscalls.c
@@ -180,7 +180,7 @@ initialise_monitor_handles (void)
   const char * name;
 
   name = ":tt";
-  asm ("mov r0,%2; mov r1, #0; swi %a1; mov %0, r0"
+  asm ("movs r0,%2; movs r1, #0; swi %a1; mov %0, r0"
        : "=r"(fh)
        : "i" (SWI_Open),"r"(name)
        : "r0","r1");
@@ -189,14 +189,14 @@ initialise_monitor_handles (void)
   if (_has_ext_stdout_stderr ())
   {
     name = ":tt";
-    asm ("mov r0,%2; mov r1, #4; swi %a1; mov %0, r0"
+    asm ("movs r0,%2; movs r1, #4; swi %a1; mov %0, r0"
 	 : "=r"(fh)
 	 : "i" (SWI_Open),"r"(name)
 	 : "r0","r1");
     monitor_stdout = fh;
 
     name = ":tt";
-    asm ("mov r0,%2; mov r1, #8; swi %a1; mov %0, r0"
+    asm ("movs r0,%2; movs r1, #8; swi %a1; mov %0, r0"
 	 : "=r"(fh)
 	 : "i" (SWI_Open),"r"(name)
 	 : "r0","r1");
diff --git a/libgloss/arm/trap.S b/libgloss/arm/trap.S
index 845ad0173..2056c2adf 100644
--- a/libgloss/arm/trap.S
+++ b/libgloss/arm/trap.S
@@ -5,7 +5,7 @@
 
 /* .text is used instead of .section .text so it works with arm-aout too.  */
 	.text
-        .align 0
+        .p2align 2
         .global __rt_stkovf_split_big
         .global __rt_stkovf_split_small
 
diff --git a/libgloss/libnosys/configure b/libgloss/libnosys/configure
index 7c23c7a0a..2fc584169 100755
--- a/libgloss/libnosys/configure
+++ b/libgloss/libnosys/configure
@@ -2058,7 +2058,7 @@ case "${target}" in
 esac
 
 case "${target}" in
-  *-*-elf)
+  *-*-elf|*-*-eabi*)
         $as_echo "#define HAVE_ELF 1" >>confdefs.h
 
 
diff --git a/newlib/libc/sys/arm/crt0.S b/newlib/libc/sys/arm/crt0.S
index 5e677a23c..6faf74096 100644
--- a/newlib/libc/sys/arm/crt0.S
+++ b/newlib/libc/sys/arm/crt0.S
@@ -556,7 +556,7 @@ change_back:
 
 	/* For Thumb, constants must be after the code since only 
 	   positive offsets are supported for PC relative addresses.  */
-	.align 0
+	.p2align 2
 .LC0:
 #ifdef ARM_RDI_MONITOR
 	.word	HeapBase
diff --git a/newlib/libc/sys/arm/trap.S b/newlib/libc/sys/arm/trap.S
index 681b3dbe0..8a49f39f3 100644
--- a/newlib/libc/sys/arm/trap.S
+++ b/newlib/libc/sys/arm/trap.S
@@ -4,7 +4,7 @@
 
 /* .text is used instead of .section .text so it works with arm-aout too.  */
 	.text
-        .align 0
+        .p2align 2
         .global __rt_stkovf_split_big
         .global __rt_stkovf_split_small
 
diff --git a/newlib/libm/machine/arm/e_sqrt.c b/newlib/libm/machine/arm/e_sqrt.c
index 6f3eb8301..40c5d1193 100644
--- a/newlib/libm/machine/arm/e_sqrt.c
+++ b/newlib/libm/machine/arm/e_sqrt.c
@@ -24,7 +24,7 @@
  * SUCH DAMAGE.
  */
 
-#if (__ARM_FP & 0x8) && !defined(__SOFTFP__)
+#if (__ARM_FP & 0x8) && !defined(__SOFTFP__) && defined NEWLIB_HW_FP
 #include <math.h>
 
 double
diff --git a/newlib/libm/machine/arm/ef_sqrt.c b/newlib/libm/machine/arm/ef_sqrt.c
index 3a1ba6cb4..a77547af5 100644
--- a/newlib/libm/machine/arm/ef_sqrt.c
+++ b/newlib/libm/machine/arm/ef_sqrt.c
@@ -24,7 +24,7 @@
  * SUCH DAMAGE.
  */
 
-#if (__ARM_FP & 0x4) && !defined(__SOFTFP__)
+#if (__ARM_FP & 0x4) && !defined(__SOFTFP__) && defined NEWLIB_HW_FP
 #include <math.h>
 
 float
diff --git a/newlib/libm/machine/arm/s_ceil.c b/newlib/libm/machine/arm/s_ceil.c
index ed1e85a3c..891708975 100644
--- a/newlib/libm/machine/arm/s_ceil.c
+++ b/newlib/libm/machine/arm/s_ceil.c
@@ -24,7 +24,7 @@
    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
 
-#if __ARM_ARCH >= 8 && (__ARM_FP & 0x8) && !defined (__SOFTFP__)
+#if __ARM_ARCH >= 8 && (__ARM_FP & 0x8) && !defined (__SOFTFP__) && defined NEWLIB_HW_FP
 #include <math.h>
 
 double
diff --git a/newlib/libm/machine/arm/s_floor.c b/newlib/libm/machine/arm/s_floor.c
index d25132f0d..82843a4f1 100644
--- a/newlib/libm/machine/arm/s_floor.c
+++ b/newlib/libm/machine/arm/s_floor.c
@@ -24,7 +24,7 @@
    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
 
-#if __ARM_ARCH >= 8 && (__ARM_FP & 0x8) && !defined (__SOFTFP__)
+#if __ARM_ARCH >= 8 && (__ARM_FP & 0x8) && !defined (__SOFTFP__) && defined NEWLIB_HW_FP
 #include <math.h>
 
 double
diff --git a/newlib/libm/machine/arm/s_nearbyint.c b/newlib/libm/machine/arm/s_nearbyint.c
index 7ead69b12..ce26bb9a0 100644
--- a/newlib/libm/machine/arm/s_nearbyint.c
+++ b/newlib/libm/machine/arm/s_nearbyint.c
@@ -24,7 +24,7 @@
    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
 
-#if __ARM_ARCH >= 8 && (__ARM_FP & 0x8) && !defined (__SOFTFP__)
+#if __ARM_ARCH >= 8 && (__ARM_FP & 0x8) && !defined (__SOFTFP__) && defined NEWLIB_HW_FP
 #include <math.h>
 
 double
diff --git a/newlib/libm/machine/arm/s_rint.c b/newlib/libm/machine/arm/s_rint.c
index 02c102250..20ad71a87 100644
--- a/newlib/libm/machine/arm/s_rint.c
+++ b/newlib/libm/machine/arm/s_rint.c
@@ -24,7 +24,7 @@
    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
 
-#if __ARM_ARCH >= 8 && (__ARM_FP & 0x8) && !defined (__SOFTFP__)
+#if __ARM_ARCH >= 8 && (__ARM_FP & 0x8) && !defined (__SOFTFP__) && defined NEWLIB_HW_FP
 #include <math.h>
 
 double
diff --git a/newlib/libm/machine/arm/s_trunc.c b/newlib/libm/machine/arm/s_trunc.c
index 6fb696814..a277331b4 100644
--- a/newlib/libm/machine/arm/s_trunc.c
+++ b/newlib/libm/machine/arm/s_trunc.c
@@ -24,7 +24,7 @@
    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
 
-#if __ARM_ARCH >= 8 && (__ARM_FP & 0x8) && !defined (__SOFTFP__)
+#if __ARM_ARCH >= 8 && (__ARM_FP & 0x8) && !defined (__SOFTFP__) && defined NEWLIB_HW_FP
 #include <math.h>
 
 double
diff --git a/newlib/libm/machine/arm/sf_ceil.c b/newlib/libm/machine/arm/sf_ceil.c
index b6efbff0b..27aeb6168 100644
--- a/newlib/libm/machine/arm/sf_ceil.c
+++ b/newlib/libm/machine/arm/sf_ceil.c
@@ -24,7 +24,7 @@
    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
 
-#if __ARM_ARCH >= 8 && !defined (__SOFTFP__)
+#if __ARM_ARCH >= 8 && !defined (__SOFTFP__) && defined NEWLIB_HW_FP
 #include <math.h>
 
 float
diff --git a/newlib/libm/machine/arm/sf_floor.c b/newlib/libm/machine/arm/sf_floor.c
index 7bc95808c..8d9b1c087 100644
--- a/newlib/libm/machine/arm/sf_floor.c
+++ b/newlib/libm/machine/arm/sf_floor.c
@@ -24,7 +24,7 @@
    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
 
-#if __ARM_ARCH >= 8 && !defined (__SOFTFP__)
+#if __ARM_ARCH >= 8 && !defined (__SOFTFP__) && defined NEWLIB_HW_FP
 #include <math.h>
 
 float
diff --git a/newlib/libm/machine/arm/sf_nearbyint.c b/newlib/libm/machine/arm/sf_nearbyint.c
index c70d84442..bb2a4a442 100644
--- a/newlib/libm/machine/arm/sf_nearbyint.c
+++ b/newlib/libm/machine/arm/sf_nearbyint.c
@@ -24,7 +24,7 @@
    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
 
-#if __ARM_ARCH >= 8 && !defined (__SOFTFP__)
+#if __ARM_ARCH >= 8 && !defined (__SOFTFP__) && defined NEWLIB_HW_FP
 #include <math.h>
 
 float
diff --git a/newlib/libm/machine/arm/sf_rint.c b/newlib/libm/machine/arm/sf_rint.c
index d9c383a7e..c9b0b1b12 100644
--- a/newlib/libm/machine/arm/sf_rint.c
+++ b/newlib/libm/machine/arm/sf_rint.c
@@ -24,7 +24,7 @@
    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
 
-#if __ARM_ARCH >= 8 && !defined (__SOFTFP__)
+#if __ARM_ARCH >= 8 && !defined (__SOFTFP__) && defined NEWLIB_HW_FP
 #include <math.h>
 
 float
diff --git a/newlib/libm/machine/arm/sf_round.c b/newlib/libm/machine/arm/sf_round.c
index 232fc0848..b647b0d42 100644
--- a/newlib/libm/machine/arm/sf_round.c
+++ b/newlib/libm/machine/arm/sf_round.c
@@ -24,7 +24,7 @@
    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
 
-#if __ARM_ARCH >= 8 && !defined (__SOFTFP__)
+#if __ARM_ARCH >= 8 && !defined (__SOFTFP__) && defined NEWLIB_HW_FP
 #include <math.h>
 
 float
diff --git a/newlib/libm/machine/arm/sf_trunc.c b/newlib/libm/machine/arm/sf_trunc.c
index 64e4aeb9a..c0e5e9049 100644
--- a/newlib/libm/machine/arm/sf_trunc.c
+++ b/newlib/libm/machine/arm/sf_trunc.c
@@ -24,7 +24,7 @@
    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
 
-#if __ARM_ARCH >= 8 && !defined (__SOFTFP__)
+#if __ARM_ARCH >= 8 && !defined (__SOFTFP__) && defined NEWLIB_HW_FP
 #include <math.h>
 
 float
diff --git a/newlib/libc/include/machine/ieeefp.h b/newlib/libc/include/machine/ieeefp.h
index aa8a1903b..19be99ecc 100644
--- a/newlib/libc/include/machine/ieeefp.h
+++ b/newlib/libc/include/machine/ieeefp.h
@@ -72,7 +72,14 @@
    byte ordering was big or little endian depending upon the target.
    Modern floating-point formats are naturally ordered; in this case
    __VFP_FP__ will be defined, even if soft-float.  */
-#ifdef __VFP_FP__
+/* Clang does not target any ARM architecture that uses the FPA architecture,
+   where double-precision floating-point values are big-endian at word level
+   and have a target-dependent endianness at byte level. Moreover, contrary
+   to gcc, Clang can leave __VFP_FP__ undefined even in modern architectures.
+   This is the case when the FPU is disabled or not present. Hence, in clang,
+   the endianness at word level is always the same as the one at byte level.
+*/
+#if defined(__VFP_FP__) || defined(__clang__)
 # ifdef __ARMEL__
 #  define __IEEE_LITTLE_ENDIAN
 # else
