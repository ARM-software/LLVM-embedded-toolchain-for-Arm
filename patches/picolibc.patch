diff --git a/meson.build b/meson.build
index 729baeed9..a242da5bf 100644
--- a/meson.build
+++ b/meson.build
@@ -965,6 +965,12 @@ if get_option('newlib-retargetable-locking') != get_option('newlib-multithread')
   error('newlib-retargetable-locking and newlib-multithread must be set to the same value')
 endif
 
+conf_data.set('_GNU_SOURCE', '',
+        description: '''Enable GNU functions like strtof_l.
+It's necessary to set this globally because inline functions in
+libc++ headers call the GNU functions.'''
+)
+
 conf_data.set('_HAVE_CC_INHIBIT_LOOP_TO_LIBCALL',
 	      cc.has_argument('-fno-tree-loop-distribute-patterns'),
 	      description: 'Compiler flag to prevent detecting memcpy/memset patterns')
@@ -1125,7 +1131,18 @@ endif
 # Dig out the list of available encodings from the encoding.aliases file. Only
 # accept the first entry from each line
 
-available_encodings = run_command(['sed', '-e', '/^#/d', '-e', '/^$/d', '-e', 's/ .*$//', files('newlib/libc/iconv/encoding.aliases')[0]], check : true).stdout().split('\n')
+available_encodings = []
+# fs.read was added in meson version 0.57.0. The sed invocation can be
+# removed once picolibc requires a version of meson newer than that.
+if meson.version().version_compare('>=0.57')
+  foreach line : fs.read('newlib/libc/iconv/encoding.aliases').split('\n')
+    if line != '' and not line.startswith('#')
+      available_encodings += [line.split()[0]]
+    endif
+  endforeach
+else
+  available_encodings = run_command(['sed', '-e', '/^#/d', '-e', '/^$/d', '-e', 's/ .*$//', files('newlib/libc/iconv/encoding.aliases')[0]], check : true).stdout().split('\n')
+endif
 
 # Include all available encodings if none were specified on the command line
 
diff --git a/picolibc.ld.in b/picolibc.ld.in
index f7e7fa80c..75d7a9aaf 100644
--- a/picolibc.ld.in
+++ b/picolibc.ld.in
@@ -207,10 +207,12 @@ SECTIONS
 	 * across them.  We actually need memory allocated for tbss,
 	 * so we create a special segment here just to make room
 	 */
+	/*
 	.tbss_space (NOLOAD) : {
 		. = ADDR(.tbss);
 		. = . + SIZEOF(.tbss);
 	} >ram AT>ram :ram
+	*/
 
 	.bss (NOLOAD) : {
 		*(.sbss*)
