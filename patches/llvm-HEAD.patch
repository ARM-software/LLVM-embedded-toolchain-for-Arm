diff --git a/clang/lib/Driver/ToolChains/BareMetal.cpp b/clang/lib/Driver/ToolChains/BareMetal.cpp
index 3d733ca504a0..ad187d42097a 100644
--- a/clang/lib/Driver/ToolChains/BareMetal.cpp
+++ b/clang/lib/Driver/ToolChains/BareMetal.cpp
@@ -125,6 +125,25 @@ static bool isARMBareMetal(const llvm::Triple &Triple) {
   return true;
 }
 
+/// Is the triple aarch64-none-elf or aarch64-none-eabi?
+static bool isAArch64BareMetal(const llvm::Triple &Triple) {
+  // This driver supports triple aarch64-none-elf
+  if (Triple.getArch() != llvm::Triple::aarch64)
+    return false;
+
+  if (Triple.getVendor() != llvm::Triple::UnknownVendor)
+    return false;
+
+  if (Triple.getOS() != llvm::Triple::UnknownOS)
+    return false;
+
+  if (Triple.getObjectFormat() != llvm::Triple::ELF)
+    return false;
+
+  return true;
+}
+
+
 static bool isRISCVBareMetal(const llvm::Triple &Triple) {
   if (Triple.getArch() != llvm::Triple::riscv32 &&
       Triple.getArch() != llvm::Triple::riscv64)
@@ -151,7 +170,8 @@ void BareMetal::findMultilibs(const Driver &D, const llvm::Triple &Triple,
 }
 
 bool BareMetal::handlesTarget(const llvm::Triple &Triple) {
-  return isARMBareMetal(Triple) || isRISCVBareMetal(Triple);
+  return isARMBareMetal(Triple) || isAArch64BareMetal(Triple) ||
+	 isRISCVBareMetal(Triple);
 }
 
 Tool *BareMetal::buildLinker() const {
diff --git a/llvm/lib/Support/CommandLine.cpp b/llvm/lib/Support/CommandLine.cpp
index 0cc82739798d..2e538f738466 100644
--- a/llvm/lib/Support/CommandLine.cpp
+++ b/llvm/lib/Support/CommandLine.cpp
@@ -1112,12 +1112,57 @@ static llvm::Error ExpandResponseFile(
   if (!RelativeNames)
     return Error::success();
   llvm::StringRef BasePath = llvm::sys::path::parent_path(FName);
-  // If names of nested response files should be resolved relative to including
-  // file, replace the included response file names with their full paths
-  // obtained by required resolution.
+
+  // There is some semantics to the config file syntax.
+  // TODO: think about the syntax a bit, currently it's rather crude.
   for (auto &Arg : NewArgv) {
+    if (!Arg)
+      continue;
+
+    // Recognize variables when they start with $
+    // The special variable $@ expands to the current path
+    // To get a literal $, use $$
+    StringRef Val(Arg);
+    StringRef::size_type Pos = Val.find('$');
+    if (Pos != StringRef::npos) {
+      SmallString<128> ExpandedVar;
+      size_t from = 0;
+
+      do {
+        //copy until variable
+        ExpandedVar.append(Val.substr(from, Pos));
+
+        // handle variable
+        Pos++;
+        switch (Val[Pos]) {
+        case '$':
+          ExpandedVar.append(1, '$');
+          break;
+        case '@':
+          ExpandedVar.append(llvm::sys::path::parent_path(FName));
+          break;
+        default:
+          // TODO: emit diagnostic
+          assert(!"unknown variable in config file");
+          break;
+        }
+        Pos++;
+
+        //continue the search
+        from = Pos;
+        Pos = Val.find('$', from);
+      } while (Pos != StringRef::npos);
+
+      //copy the rest of the argument over
+      ExpandedVar.append(Val.substr(from));
+      Arg = Saver.save(ExpandedVar.c_str()).data();
+    }
+    // If names of nested response files should be resolved relative to including
+    // file, replace the included response file names with their full paths
+    // obtained by required resolution.
+
     // Skip non-rsp file arguments.
-    if (!Arg || Arg[0] != '@')
+    if (Arg[0] != '@')
       continue;
 
     StringRef FileName(Arg + 1);
