diff --git a/libcxx/include/cmath b/libcxx/include/cmath
index ef3a67843e10..485bd284d5ea 100644
--- a/libcxx/include/cmath
+++ b/libcxx/include/cmath
@@ -7,6 +7,9 @@
 //
 //===----------------------------------------------------------------------===//
 
+// Modifications copyright (C) 2021 Arm Limited (or its affiliates).
+// All rights reserved.
+
 #ifndef _LIBCPP_CMATH
 #define _LIBCPP_CMATH
 
@@ -541,7 +544,9 @@ using ::truncl _LIBCPP_USING_IF_EXISTS;
 #if _LIBCPP_STD_VER > 14
 inline _LIBCPP_INLINE_VISIBILITY float       hypot(       float __x,       float __y,       float __z ) { return sqrt(__x*__x + __y*__y + __z*__z); }
 inline _LIBCPP_INLINE_VISIBILITY double      hypot(      double __x,      double __y,      double __z ) { return sqrt(__x*__x + __y*__y + __z*__z); }
+#if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_INLINE_VISIBILITY long double hypot( long double __x, long double __y, long double __z ) { return sqrt(__x*__x + __y*__y + __z*__z); }
+#endif
 
 template <class _A1, class _A2, class _A3>
 inline _LIBCPP_INLINE_VISIBILITY
diff --git a/libcxx/include/math.h b/libcxx/include/math.h
index 46a0a813ed05..9042959e16fb 100644
--- a/libcxx/include/math.h
+++ b/libcxx/include/math.h
@@ -7,6 +7,9 @@
 //
 //===----------------------------------------------------------------------===//
 
+// Modifications copyright (C) 2021 Arm Limited (or its affiliates).
+// All rights reserved.
+
 #ifndef _LIBCPP_MATH_H
 #define _LIBCPP_MATH_H
 
@@ -540,8 +543,10 @@ inline _LIBCPP_HIDE_FROM_ABI bool isunordered(_A1 __x, _A2 __y) _NOEXCEPT {
 
 #    if !defined(__sun__)
 inline _LIBCPP_HIDE_FROM_ABI float       acos(float __x) _NOEXCEPT       {return ::acosf(__x);}
+#    if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double acos(long double __x) _NOEXCEPT {return ::acosl(__x);}
 #    endif
+#    endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -552,8 +557,10 @@ acos(_A1 __x) _NOEXCEPT {return ::acos((double)__x);}
 
 #    if !defined(__sun__)
 inline _LIBCPP_HIDE_FROM_ABI float       asin(float __x) _NOEXCEPT       {return ::asinf(__x);}
+#    if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double asin(long double __x) _NOEXCEPT {return ::asinl(__x);}
 #    endif
+#    endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -564,8 +571,10 @@ asin(_A1 __x) _NOEXCEPT {return ::asin((double)__x);}
 
 #    if !defined(__sun__)
 inline _LIBCPP_HIDE_FROM_ABI float       atan(float __x) _NOEXCEPT       {return ::atanf(__x);}
+#    if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double atan(long double __x) _NOEXCEPT {return ::atanl(__x);}
 #    endif
+#    endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -576,8 +585,10 @@ atan(_A1 __x) _NOEXCEPT {return ::atan((double)__x);}
 
 #    if !defined(__sun__)
 inline _LIBCPP_HIDE_FROM_ABI float       atan2(float __y, float __x) _NOEXCEPT             {return ::atan2f(__y, __x);}
+#    if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double atan2(long double __y, long double __x) _NOEXCEPT {return ::atan2l(__y, __x);}
 #    endif
+#    endif
 
 template <class _A1, class _A2>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -599,8 +610,10 @@ atan2(_A1 __y, _A2 __x) _NOEXCEPT
 
 #    if !defined(__sun__)
 inline _LIBCPP_HIDE_FROM_ABI float       ceil(float __x) _NOEXCEPT       {return ::ceilf(__x);}
+#    if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double ceil(long double __x) _NOEXCEPT {return ::ceill(__x);}
 #    endif
+#    endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -611,8 +624,10 @@ ceil(_A1 __x) _NOEXCEPT {return ::ceil((double)__x);}
 
 #    if !defined(__sun__)
 inline _LIBCPP_HIDE_FROM_ABI float       cos(float __x) _NOEXCEPT       {return ::cosf(__x);}
+#    if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double cos(long double __x) _NOEXCEPT {return ::cosl(__x);}
 #    endif
+#    endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -623,8 +638,10 @@ cos(_A1 __x) _NOEXCEPT {return ::cos((double)__x);}
 
 #    if !defined(__sun__)
 inline _LIBCPP_HIDE_FROM_ABI float       cosh(float __x) _NOEXCEPT       {return ::coshf(__x);}
+#    if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double cosh(long double __x) _NOEXCEPT {return ::coshl(__x);}
 #    endif
+#    endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -635,8 +652,10 @@ cosh(_A1 __x) _NOEXCEPT {return ::cosh((double)__x);}
 
 #    if !defined(__sun__)
 inline _LIBCPP_HIDE_FROM_ABI float       exp(float __x) _NOEXCEPT       {return ::expf(__x);}
+#    if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double exp(long double __x) _NOEXCEPT {return ::expl(__x);}
 #    endif
+#    endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -647,8 +666,10 @@ exp(_A1 __x) _NOEXCEPT {return ::exp((double)__x);}
 
 #    if !defined(__sun__)
 inline _LIBCPP_HIDE_FROM_ABI float       fabs(float __x) _NOEXCEPT       {return ::fabsf(__x);}
+#    if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double fabs(long double __x) _NOEXCEPT {return ::fabsl(__x);}
 #    endif
+#    endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -659,8 +680,10 @@ fabs(_A1 __x) _NOEXCEPT {return ::fabs((double)__x);}
 
 #    if !defined(__sun__)
 inline _LIBCPP_HIDE_FROM_ABI float       floor(float __x) _NOEXCEPT       {return ::floorf(__x);}
+#    if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double floor(long double __x) _NOEXCEPT {return ::floorl(__x);}
 #    endif
+#    endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -671,8 +694,10 @@ floor(_A1 __x) _NOEXCEPT {return ::floor((double)__x);}
 
 #    if !defined(__sun__)
 inline _LIBCPP_HIDE_FROM_ABI float       fmod(float __x, float __y) _NOEXCEPT             {return ::fmodf(__x, __y);}
+#    if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double fmod(long double __x, long double __y) _NOEXCEPT {return ::fmodl(__x, __y);}
 #    endif
+#    endif
 
 template <class _A1, class _A2>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -694,8 +719,10 @@ fmod(_A1 __x, _A2 __y) _NOEXCEPT
 
 #    if !defined(__sun__)
 inline _LIBCPP_HIDE_FROM_ABI float       frexp(float __x, int* __e) _NOEXCEPT       {return ::frexpf(__x, __e);}
+#    if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double frexp(long double __x, int* __e) _NOEXCEPT {return ::frexpl(__x, __e);}
 #    endif
+#    endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -706,8 +733,10 @@ frexp(_A1 __x, int* __e) _NOEXCEPT {return ::frexp((double)__x, __e);}
 
 #    if !defined(__sun__)
 inline _LIBCPP_HIDE_FROM_ABI float       ldexp(float __x, int __e) _NOEXCEPT       {return ::ldexpf(__x, __e);}
+#    if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double ldexp(long double __x, int __e) _NOEXCEPT {return ::ldexpl(__x, __e);}
 #    endif
+#    endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -718,8 +747,10 @@ ldexp(_A1 __x, int __e) _NOEXCEPT {return ::ldexp((double)__x, __e);}
 
 #    if !defined(__sun__)
 inline _LIBCPP_HIDE_FROM_ABI float       log(float __x) _NOEXCEPT       {return ::logf(__x);}
+#    if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double log(long double __x) _NOEXCEPT {return ::logl(__x);}
 #    endif
+#    endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -730,8 +761,10 @@ log(_A1 __x) _NOEXCEPT {return ::log((double)__x);}
 
 #    if !defined(__sun__)
 inline _LIBCPP_HIDE_FROM_ABI float       log10(float __x) _NOEXCEPT       {return ::log10f(__x);}
+#    if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double log10(long double __x) _NOEXCEPT {return ::log10l(__x);}
 #    endif
+#    endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -742,15 +775,19 @@ log10(_A1 __x) _NOEXCEPT {return ::log10((double)__x);}
 
 #    if !defined(__sun__)
 inline _LIBCPP_HIDE_FROM_ABI float       modf(float __x, float* __y) _NOEXCEPT             {return ::modff(__x, __y);}
+#    if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double modf(long double __x, long double* __y) _NOEXCEPT {return ::modfl(__x, __y);}
 #    endif
+#    endif
 
 // pow
 
 #    if !defined(__sun__)
 inline _LIBCPP_HIDE_FROM_ABI float       pow(float __x, float __y) _NOEXCEPT             {return ::powf(__x, __y);}
+#    if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double pow(long double __x, long double __y) _NOEXCEPT {return ::powl(__x, __y);}
 #    endif
+#    endif
 
 template <class _A1, class _A2>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -772,7 +809,9 @@ pow(_A1 __x, _A2 __y) _NOEXCEPT
 
 #    if !defined(__sun__)
 inline _LIBCPP_HIDE_FROM_ABI float       sin(float __x) _NOEXCEPT       {return ::sinf(__x);}
+#    if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double sin(long double __x) _NOEXCEPT {return ::sinl(__x);}
+#    endif
 #endif
 
 template <class _A1>
@@ -784,8 +823,10 @@ sin(_A1 __x) _NOEXCEPT {return ::sin((double)__x);}
 
 #    if !defined(__sun__)
 inline _LIBCPP_HIDE_FROM_ABI float       sinh(float __x) _NOEXCEPT       {return ::sinhf(__x);}
+#    if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double sinh(long double __x) _NOEXCEPT {return ::sinhl(__x);}
 #    endif
+#    endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -796,8 +837,10 @@ sinh(_A1 __x) _NOEXCEPT {return ::sinh((double)__x);}
 
 #    if !defined(__sun__)
 inline _LIBCPP_HIDE_FROM_ABI float       sqrt(float __x) _NOEXCEPT       {return ::sqrtf(__x);}
+#    if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double sqrt(long double __x) _NOEXCEPT {return ::sqrtl(__x);}
 #    endif
+#    endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -808,8 +851,10 @@ sqrt(_A1 __x) _NOEXCEPT {return ::sqrt((double)__x);}
 
 #    if !defined(__sun__)
 inline _LIBCPP_HIDE_FROM_ABI float       tan(float __x) _NOEXCEPT       {return ::tanf(__x);}
+#    if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double tan(long double __x) _NOEXCEPT {return ::tanl(__x);}
 #    endif
+#    endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -820,8 +865,10 @@ tan(_A1 __x) _NOEXCEPT {return ::tan((double)__x);}
 
 #    if !defined(__sun__)
 inline _LIBCPP_HIDE_FROM_ABI float       tanh(float __x) _NOEXCEPT       {return ::tanhf(__x);}
+#    if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double tanh(long double __x) _NOEXCEPT {return ::tanhl(__x);}
 #    endif
+#    endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -831,7 +878,9 @@ tanh(_A1 __x) _NOEXCEPT {return ::tanh((double)__x);}
 // acosh
 
 inline _LIBCPP_HIDE_FROM_ABI float       acosh(float __x) _NOEXCEPT       {return ::acoshf(__x);}
+#if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double acosh(long double __x) _NOEXCEPT {return ::acoshl(__x);}
+#endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -841,7 +890,9 @@ acosh(_A1 __x) _NOEXCEPT {return ::acosh((double)__x);}
 // asinh
 
 inline _LIBCPP_HIDE_FROM_ABI float       asinh(float __x) _NOEXCEPT       {return ::asinhf(__x);}
+#if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double asinh(long double __x) _NOEXCEPT {return ::asinhl(__x);}
+#endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -851,7 +902,9 @@ asinh(_A1 __x) _NOEXCEPT {return ::asinh((double)__x);}
 // atanh
 
 inline _LIBCPP_HIDE_FROM_ABI float       atanh(float __x) _NOEXCEPT       {return ::atanhf(__x);}
+#if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double atanh(long double __x) _NOEXCEPT {return ::atanhl(__x);}
+#endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -861,7 +914,9 @@ atanh(_A1 __x) _NOEXCEPT {return ::atanh((double)__x);}
 // cbrt
 
 inline _LIBCPP_HIDE_FROM_ABI float       cbrt(float __x) _NOEXCEPT       {return ::cbrtf(__x);}
+#if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double cbrt(long double __x) _NOEXCEPT {return ::cbrtl(__x);}
+#endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -924,7 +979,9 @@ typename std::__enable_if_t
 // erf
 
 inline _LIBCPP_HIDE_FROM_ABI float       erf(float __x) _NOEXCEPT       {return ::erff(__x);}
+#if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double erf(long double __x) _NOEXCEPT {return ::erfl(__x);}
+#endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -934,7 +991,9 @@ erf(_A1 __x) _NOEXCEPT {return ::erf((double)__x);}
 // erfc
 
 inline _LIBCPP_HIDE_FROM_ABI float       erfc(float __x) _NOEXCEPT       {return ::erfcf(__x);}
+#if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double erfc(long double __x) _NOEXCEPT {return ::erfcl(__x);}
+#endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -944,7 +1003,9 @@ erfc(_A1 __x) _NOEXCEPT {return ::erfc((double)__x);}
 // exp2
 
 inline _LIBCPP_HIDE_FROM_ABI float       exp2(float __x) _NOEXCEPT       {return ::exp2f(__x);}
+#if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double exp2(long double __x) _NOEXCEPT {return ::exp2l(__x);}
+#endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -954,7 +1015,9 @@ exp2(_A1 __x) _NOEXCEPT {return ::exp2((double)__x);}
 // expm1
 
 inline _LIBCPP_HIDE_FROM_ABI float       expm1(float __x) _NOEXCEPT       {return ::expm1f(__x);}
+#if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double expm1(long double __x) _NOEXCEPT {return ::expm1l(__x);}
+#endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -964,7 +1027,9 @@ expm1(_A1 __x) _NOEXCEPT {return ::expm1((double)__x);}
 // fdim
 
 inline _LIBCPP_HIDE_FROM_ABI float       fdim(float __x, float __y) _NOEXCEPT             {return ::fdimf(__x, __y);}
+#if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double fdim(long double __x, long double __y) _NOEXCEPT {return ::fdiml(__x, __y);}
+#endif
 
 template <class _A1, class _A2>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -1014,7 +1079,9 @@ fma(_A1 __x, _A2 __y, _A3 __z) _NOEXCEPT
 // fmax
 
 inline _LIBCPP_HIDE_FROM_ABI float       fmax(float __x, float __y) _NOEXCEPT             {return ::fmaxf(__x, __y);}
+#if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double fmax(long double __x, long double __y) _NOEXCEPT {return ::fmaxl(__x, __y);}
+#endif
 
 template <class _A1, class _A2>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -1035,7 +1102,9 @@ fmax(_A1 __x, _A2 __y) _NOEXCEPT
 // fmin
 
 inline _LIBCPP_HIDE_FROM_ABI float       fmin(float __x, float __y) _NOEXCEPT             {return ::fminf(__x, __y);}
+#if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double fmin(long double __x, long double __y) _NOEXCEPT {return ::fminl(__x, __y);}
+#endif
 
 template <class _A1, class _A2>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -1056,7 +1125,9 @@ fmin(_A1 __x, _A2 __y) _NOEXCEPT
 // hypot
 
 inline _LIBCPP_HIDE_FROM_ABI float       hypot(float __x, float __y) _NOEXCEPT             {return ::hypotf(__x, __y);}
+#if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double hypot(long double __x, long double __y) _NOEXCEPT {return ::hypotl(__x, __y);}
+#endif
 
 template <class _A1, class _A2>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -1077,7 +1148,9 @@ hypot(_A1 __x, _A2 __y) _NOEXCEPT
 // ilogb
 
 inline _LIBCPP_HIDE_FROM_ABI int ilogb(float __x) _NOEXCEPT       {return ::ilogbf(__x);}
+#if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI int ilogb(long double __x) _NOEXCEPT {return ::ilogbl(__x);}
+#endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -1087,7 +1160,9 @@ ilogb(_A1 __x) _NOEXCEPT {return ::ilogb((double)__x);}
 // lgamma
 
 inline _LIBCPP_HIDE_FROM_ABI float       lgamma(float __x) _NOEXCEPT       {return ::lgammaf(__x);}
+#if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double lgamma(long double __x) _NOEXCEPT {return ::lgammal(__x);}
+#endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -1135,7 +1210,9 @@ llround(_A1 __x) _NOEXCEPT
 // log1p
 
 inline _LIBCPP_HIDE_FROM_ABI float       log1p(float __x) _NOEXCEPT       {return ::log1pf(__x);}
+#if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double log1p(long double __x) _NOEXCEPT {return ::log1pl(__x);}
+#endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -1145,7 +1222,9 @@ log1p(_A1 __x) _NOEXCEPT {return ::log1p((double)__x);}
 // log2
 
 inline _LIBCPP_HIDE_FROM_ABI float       log2(float __x) _NOEXCEPT       {return ::log2f(__x);}
+#if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double log2(long double __x) _NOEXCEPT {return ::log2l(__x);}
+#endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -1155,7 +1234,9 @@ log2(_A1 __x) _NOEXCEPT {return ::log2((double)__x);}
 // logb
 
 inline _LIBCPP_HIDE_FROM_ABI float       logb(float __x) _NOEXCEPT       {return ::logbf(__x);}
+#if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double logb(long double __x) _NOEXCEPT {return ::logbl(__x);}
+#endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -1205,7 +1286,9 @@ lround(_A1 __x) _NOEXCEPT
 // nearbyint
 
 inline _LIBCPP_HIDE_FROM_ABI float       nearbyint(float __x) _NOEXCEPT       {return ::nearbyintf(__x);}
+#if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double nearbyint(long double __x) _NOEXCEPT {return ::nearbyintl(__x);}
+#endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -1215,7 +1298,9 @@ nearbyint(_A1 __x) _NOEXCEPT {return ::nearbyint((double)__x);}
 // nextafter
 
 inline _LIBCPP_HIDE_FROM_ABI float       nextafter(float __x, float __y) _NOEXCEPT             {return ::nextafterf(__x, __y);}
+#if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double nextafter(long double __x, long double __y) _NOEXCEPT {return ::nextafterl(__x, __y);}
+#endif
 
 template <class _A1, class _A2>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -1235,6 +1320,7 @@ nextafter(_A1 __x, _A2 __y) _NOEXCEPT
 
 // nexttoward
 
+#if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI float       nexttoward(float __x, long double __y) _NOEXCEPT       {return ::nexttowardf(__x, __y);}
 inline _LIBCPP_HIDE_FROM_ABI long double nexttoward(long double __x, long double __y) _NOEXCEPT {return ::nexttowardl(__x, __y);}
 
@@ -1242,11 +1328,14 @@ template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
 typename std::enable_if<std::is_integral<_A1>::value, double>::type
 nexttoward(_A1 __x, long double __y) _NOEXCEPT {return ::nexttoward((double)__x, __y);}
+#endif
 
 // remainder
 
 inline _LIBCPP_HIDE_FROM_ABI float       remainder(float __x, float __y) _NOEXCEPT             {return ::remainderf(__x, __y);}
+#if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double remainder(long double __x, long double __y) _NOEXCEPT {return ::remainderl(__x, __y);}
+#endif
 
 template <class _A1, class _A2>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -1267,7 +1356,9 @@ remainder(_A1 __x, _A2 __y) _NOEXCEPT
 // remquo
 
 inline _LIBCPP_HIDE_FROM_ABI float       remquo(float __x, float __y, int* __z) _NOEXCEPT             {return ::remquof(__x, __y, __z);}
+#if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double remquo(long double __x, long double __y, int* __z) _NOEXCEPT {return ::remquol(__x, __y, __z);}
+#endif
 
 template <class _A1, class _A2>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -1326,7 +1417,9 @@ round(_A1 __x) _NOEXCEPT
 // scalbln
 
 inline _LIBCPP_HIDE_FROM_ABI float       scalbln(float __x, long __y) _NOEXCEPT       {return ::scalblnf(__x, __y);}
+#if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double scalbln(long double __x, long __y) _NOEXCEPT {return ::scalblnl(__x, __y);}
+#endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -1336,7 +1429,9 @@ scalbln(_A1 __x, long __y) _NOEXCEPT {return ::scalbln((double)__x, __y);}
 // scalbn
 
 inline _LIBCPP_HIDE_FROM_ABI float       scalbn(float __x, int __y) _NOEXCEPT       {return ::scalbnf(__x, __y);}
+#if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double scalbn(long double __x, int __y) _NOEXCEPT {return ::scalbnl(__x, __y);}
+#endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
@@ -1346,7 +1441,9 @@ scalbn(_A1 __x, int __y) _NOEXCEPT {return ::scalbn((double)__x, __y);}
 // tgamma
 
 inline _LIBCPP_HIDE_FROM_ABI float       tgamma(float __x) _NOEXCEPT       {return ::tgammaf(__x);}
+#if !(defined(__NEWLIB__) && (defined(_LDBLD_EQ_DBL) || !defined(__CYGWIN__)))
 inline _LIBCPP_HIDE_FROM_ABI long double tgamma(long double __x) _NOEXCEPT {return ::tgammal(__x);}
+#endif
 
 template <class _A1>
 inline _LIBCPP_HIDE_FROM_ABI
