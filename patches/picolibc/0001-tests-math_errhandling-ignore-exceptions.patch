From 66b9396e53934bb8a1b5fd7f0036b89236be1f85 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Dominik=20W=C3=B3jt?= <dominik.wojt@arm.com>
Date: Fri, 2 Jun 2023 13:23:02 +0200
Subject: [PATCH] tests: math_errhandling: ignore exceptions

Added 'tests-enable-fe-exception-checks' configuration option. The
option is enabled by default and can be disabled on platforms, which do
not support "#pragma STDC FENV_ACCESS ON".

Removed misleading LONG_DOUBLE_EXCEPTION_TEST and DOUBLE_EXCEPTION_TEST
defines. These both took the current value of EXCEPTION_TEST not the one
from the assignment time. Both `long double` and `double` tests were
run, even when PICOLIBC_LONG_DOUBLE_NOEXCEPT or PICOLIBC_DOUBLE_NOEXCEPT
were defined. As the tests passed anyway and the exceptions were
intentionally not set, the tests are left enabled.
---
 meson.build                   | 1 +
 meson_options.txt             | 2 ++
 test/math_errhandling.c       | 8 ++------
 test/math_errhandling_tests.c | 4 ++++
 test/meson.build              | 7 ++++++-
 5 files changed, 15 insertions(+), 7 deletions(-)

diff --git a/meson.build b/meson.build
index 9a11346d0..39227dc74 100644
--- a/meson.build
+++ b/meson.build
@@ -179,6 +179,7 @@ enable_native_tests = get_option('native-tests')
 tests_enable_stack_protector = get_option('tests-enable-stack-protector')
 tests_enable_full_malloc_stress = get_option('tests-enable-full-malloc-stress')
 tests_enable_posix_io = get_option('tests-enable-posix-io')
+tests_enable_fe_exception_checks = get_option('tests-enable-fe-exception-checks')
 have_alias_attribute_option = get_option('have-alias-attribute')
 have_format_attribute_option = get_option('have-format-attribute')
 have_weak_attribute_option = get_option('have-weak-attribute')
diff --git a/meson_options.txt b/meson_options.txt
index e07823111..61a9a386f 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -105,6 +105,8 @@ option('tests-enable-full-malloc-stress', type: 'boolean', value: false,
        description: 'tests enable stress test for full malloc')
 option('tests-enable-posix-io', type: 'boolean', value: true,
        description: 'tests enable posix-io when available')
+option('tests-enable-fe-exception-checks', type: 'boolean', value: true,
+       description: 'tests enable floating point exceptions checks')
 
 option('tinystdio', type: 'boolean', value: true,
        description: 'Use tiny stdio from avr libc')
diff --git a/test/math_errhandling.c b/test/math_errhandling.c
index 3bb8d4748..146d2dc64 100644
--- a/test/math_errhandling.c
+++ b/test/math_errhandling.c
@@ -147,7 +147,6 @@ e_to_str(int e)
 #else
 #define EXCEPTION_TEST	MATH_ERREXCEPT
 #endif
-#define LONG_DOUBLE_EXCEPTION_TEST EXCEPTION_TEST
 #ifdef _M_PI_L
 #define PI_VAL _M_PI_L
 #else
@@ -207,7 +206,6 @@ e_to_str(int e)
 #else
 #define EXCEPTION_TEST	MATH_ERREXCEPT
 #endif
-#define DOUBLE_EXCEPTION_TEST EXCEPTION_TEST
 
 #define BIG 1.7e308
 #define BIGODD  0x1.123456789abcdp+52
@@ -264,14 +262,12 @@ int main(void)
 {
 	int result = 0;
 
-#if DOUBLE_EXCEPTION_TEST
 	printf("Double tests:\n");
 	result += run_tests();
-#endif
-#ifdef LONG_DOUBLE_EXCEPTION_TEST
+
 	printf("Long double tests:\n");
 	result += run_testsl();
-#endif
+
 	printf("Float tests:\n");
 	result += run_testsf();
 	return result;
diff --git a/test/math_errhandling_tests.c b/test/math_errhandling_tests.c
index 389ced3dd..ff15f60de 100644
--- a/test/math_errhandling_tests.c
+++ b/test/math_errhandling_tests.c
@@ -1420,6 +1420,7 @@ makemathname(run_tests)(void) {
                         printf("\n");
 			++result;
 		}
+#if ENABLE_FE_EXCEPTION_CHECKS
 		if (math_errhandling & EXCEPTION_TEST) {
                     int expect_except = makemathname(tests)[t].except;
                     int mask = MY_EXCEPT;
@@ -1443,6 +1444,7 @@ makemathname(run_tests)(void) {
 				++result;
 			}
 		}
+#endif
 		if (math_errhandling & MATH_ERRNO) {
 			if (err != makemathname(tests)[t].errno_expect) {
                                 PRINT;
@@ -1474,6 +1476,7 @@ makemathname(run_tests)(void) {
 			printf("\tbad value got %ld expect %ld\n", iv, makemathname(itests)[t].value);
 			++result;
 		}
+#if ENABLE_FE_EXCEPTION_CHECKS
 		if (math_errhandling & EXCEPTION_TEST) {
                         int expect_except = makemathname(itests)[t].except;
                         int mask = MY_EXCEPT;
@@ -1497,6 +1500,7 @@ makemathname(run_tests)(void) {
 				++result;
 			}
 		}
+#endif
 		if (math_errhandling & MATH_ERRNO) {
 			if (err != makemathname(itests)[t].errno_expect) {
                                 IPRINT;
diff --git a/test/meson.build b/test/meson.build
index 033d55aab..e11038b97 100644
--- a/test/meson.build
+++ b/test/meson.build
@@ -260,9 +260,14 @@ foreach target : targets
     t1_name = t1 + '_' + target
   endif
 
+  math_errhandling_c_args = []
+  if tests_enable_fe_exception_checks
+    math_errhandling_c_args += ['-DENABLE_FE_EXCEPTION_CHECKS']
+  endif
+
   test(t1_name,
        executable(t1_name, ['math_errhandling.c'],
-		  c_args: arg_fnobuiltin + _c_args,
+		  c_args: arg_fnobuiltin + math_errhandling_c_args + _c_args,
 		  link_args: _link_args,
 		  objects: _objs,
 		  link_with: _libs,
-- 
2.25.1

